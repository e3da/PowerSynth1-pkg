function maxtemp = ParaPowerSynth_Thermal(psjson)
% Test script for debugging PowerSynth to ParaPower conversion.
% Input: PowerSynth legacy "module design" file and requisite ParaPower
% settings converted to a JSON file by PowerSynth.
% Output: maximum temperature from a static ParaPower thermal analysis run

% Load JSON data generated by PowerSynth.
% For debugging:
% psjson = fileread('0_PowerSynth_MD_JSON.json');
    warning('off', 'all');
psdata = jsondecode(psjson);

% Start adding items to make it work with FormModel
psdata.Version = 'V2.0';

% Use and old version of a MatLib to help populate a new one.
%matlib_old = load('PackMats_Update.mat');

% Make a new PPMatLib instance
mlib = PPMatLib;

for i = 1:length(psdata.Materials)
    material = psdata.Materials{i};
    name = material.name;
    % Currently supported fields in PowerSynth material library
    rho = material.density;
    k = material.thermal_cond;
    cp = material.spec_heat_cap;
    % Unsupported fields in PowerSynth material library, default to 1.0
    cte = 1.0;
    E = 1.0;
    nu = 1.0;
    
    % Only solid materials supported by PowerSynth in v1.4
    new_matl = PPMatSolid('cte', cte, 'E', E, 'nu', nu, 'k', k, 'rho', rho, 'cp', cp);
    new_matl.Name = char(name);
    mlib.AddMatl(new_matl);
end
    

% Append the new MatLib to the PowerSynth data.
psdata.MatLib = mlib;

% For stress
% substrate_index = 0;

for i = 1:numel(psdata.Features)
    % Convert PowerSynth coordinate pairs from text to MATLAB doubles then
    % convert units from microns to meters.
    psdata.Features(i).x = List2Mat(psdata.Features(i).x)*1e-6;
    psdata.Features(i).y = List2Mat(psdata.Features(i).y)*1e-6;
    psdata.Features(i).z = List2Mat(psdata.Features(i).z)*1e-6;
end

% Remove "Materials" field from the JSON data before running Morris's func
psdata = rmfield(psdata, 'Materials');

% Use Morris's function to convert structure data to PPTCM
psdata_converted = ConvertToPPTCM(psdata);

% Now try to use FormModel
PSMI = FormModel(psdata_converted);

% Try to run thermal analysis
GlobalTime = 0:10:100;
% GlobalTime = [0];
PSMI.GlobalTime = GlobalTime;
% InitTime=[];
StepsToEstimate=0;
ComputeTime=[];
InitTime = GlobalTime(1);
ComputeTime = GlobalTime(2:end);
StepsToEstimate = 2;

if ~isempty(PSMI.GlobalTime)
    InitTime=PSMI.GlobalTime(1);    %Time at initialization extracted from PSMI.GlobalTime
    ComputeTime=PSMI.GlobalTime(2:end); %extract time to compute states from PSMI.GlobalTime

    PSMI.GlobalTime=InitTime;  %Setup initialization
    StepsToEstimate=2;
else
    InitTime=[];
    StepsToEstimate=0;
    ComputeTime=[];
end
S1=scPPT('MI',PSMI); %Initialize object
setup(S1,[]);
tic
[Tprnt, T_in, MeltFrac,MeltFrac_in]=S1([InitTime ComputeTime(1:min(StepsToEstimate,length(ComputeTime)))]);  %Compute states at times in ComputeTime (S1 must be called with 1 arg in 2017b)
EstTime=toc;

if length(ComputeTime)>StepsToEstimate
    [Tprnt2, T_in2, MeltFrac2,MeltFrac_in2]=S1(ComputeTime(3:end));  %Compute states at times in ComputeTime (S1 must be called with 1 arg in 2017b)
    Tprnt   =cat(4, T_in        , Tprnt   ,  Tprnt2   );
    MeltFrac=cat(4, MeltFrac_in , MeltFrac,  MeltFrac2);
else
    Tprnt=cat(4,T_in,Tprnt);
    MeltFrac=cat(4,MeltFrac_in,MeltFrac);
end

PSMI.GlobalTime = [InitTime ComputeTime]; %Reassemble PSMI's global time to match initialization and computed states.

Etime=toc;

Results(1)=PPResults(now, PSMI, 1,'Thermal','MeltFrac');
Results(1)=Results(1).setState('Thermal',Tprnt);
Results(1)=Results(1).setState('MeltFrac',MeltFrac);

thermal_results = Results.getState('Thermal');
maxtemp = max(thermal_results(:));

end

function [parapower_name] = NameLookUp(ps_name)
%NAMELOOKUP Converts PowerSynth material names to those used in ParaPower.
%   This function is a temporary solution only until the material library
%   linking is completed.
%   FUNCTION DEPRICATED AS OF 4/1/2021. Keeping as legacy for debugging
%   until next release.
if isempty(ps_name)
    ps_name = 'SiC';
end
ps_mats = {'copper', 'Pb-Sn Solder Alloy', 'MarkeTech AlN 160', 'SiC', 'Aluminum', 'Al_N', 'MarkeTech Mo70Cu Moly', 'Copper'};
pp_mats = {'Cu', 'SAC405', 'AlN', 'SiC', 'Al', 'AlN', 'Cu', 'Cu'};
if any(strcmp(ps_mats, ps_name))
    mat_map = containers.Map(ps_mats, pp_mats);
    parapower_name = mat_map(ps_name);
else
    parapower_name = ps_name;
end
end

function [data_mat] = List2Mat(data_list)
%LIST2MAT Converts PowerSynth numerical lists to MATLAB double arrays.
%   PowerSynth sends over x, y, and z coordinate start and end locations of
%   features as a list of paired values as text. This function converts
%   them to MATLAB doubles compatible with ParaPower formatting.
data_mat = double([data_list(1) data_list(2)]);

end

function [Pout]=ConvertToPPTCM(Pin)
%Converts from an old structure definition of PPTCM to the current object
%definition. Provided by Morris Berman of ARL on 1/30/2020.
%
%P_object=ConvertToPPTCM(P_OldStructure)

Pout=PPTCM;
fFields=fields(Pout.Features(1));
Fields=fields(Pin);
for ThisField=reshape(Fields,1,[])
    ThisField=ThisField{1};
    % disp(['Converting fieldname "' ThisField,'"...'])
    if strcmpi(ThisField,'Features')
        for Fi=1:length(Pin.Features)
            ThisFeature=Pin.Features(Fi);
            for ThisfField=reshape(fFields,1,[])
                ThisfField=ThisfField{1};
                if strcmpi(ThisfField,'Desc')
                    Oldfield='name';
                else
                    Oldfield=ThisfField;
                end
                Pout.Features(Fi).(ThisfField)=Pin.Features(Fi).(Oldfield);
            end
        end
        
    elseif strcmpi(ThisField,'ExternalConditions')
        Pout.ExternalConditions.h_Xminus=Pin.ExternalConditions.h_Left;
        Pout.ExternalConditions.h_Xplus=Pin.ExternalConditions.h_Right;
        Pout.ExternalConditions.h_Yplus=Pin.ExternalConditions.h_Front;
        Pout.ExternalConditions.h_Yminus=Pin.ExternalConditions.h_Back;
        Pout.ExternalConditions.h_Zplus=Pin.ExternalConditions.h_Top;
        Pout.ExternalConditions.h_Zminus=Pin.ExternalConditions.h_Bottom;
    
        Pout.ExternalConditions.Ta_Xminus=Pin.ExternalConditions.Ta_Left;
        Pout.ExternalConditions.Ta_Xplus=Pin.ExternalConditions.Ta_Right;
        Pout.ExternalConditions.Ta_Yplus=Pin.ExternalConditions.Ta_Front;
        Pout.ExternalConditions.Ta_Yminus=Pin.ExternalConditions.Ta_Back;
        Pout.ExternalConditions.Ta_Zplus=Pin.ExternalConditions.Ta_Top;
        Pout.ExternalConditions.Ta_Zminus=Pin.ExternalConditions.Ta_Bottom;
        
        Pout.ExternalConditions.Tproc=Pin.ExternalConditions.Tproc;
    elseif strcmpi(ThisField,'Version')
    else
        Pout.(ThisField)=Pin.(ThisField);
    end
end
end